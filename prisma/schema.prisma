generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String?   @unique
  wallet         String?   @unique
  provider       String    // e.g., "google", "wallet", or "both"
  username       String?  
  profilePicture String?  
  comments       Comment[]
  likes          Like[]
  createdAt      DateTime  @default(now())
  subscriptions  Subscription[]
}


model AIInfluencer {
  id              String   @id @default(uuid())
  name            String   @unique
  bio             String?  
  posts           Post[]
  createdAt       DateTime @default(now())
  profilePicture  String?
}

model Post {
  id            String   @id @default(uuid())
  content       String  
  imageUrl      String?  // AI-generated image (Supabase)
  influencer    AIInfluencer @relation(fields: [influencerId], references: [id])
  influencerId  String
  comments      Comment[]
  likes         Like[]   // New relation: likes on the post
  createdAt     DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // ensures a user can like a post only once
}

model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  paymentId  String?  // Optional field to store the payment transaction id
  amount     Float    // Amount paid for the subscription
  createdAt  DateTime @default(now())
}
